import streamlit as st
import requests
import pandas as pd
from datetime import datetime, timedelta

# Page config (Malayalam title, wide layout for mobile)
st.set_page_config(
    page_title="Krishi Sakhi - ‡¥ï‡µÉ‡¥∑‡¥ø ‡¥∏‡¥ñ‡¥ø",
    page_icon="üå±",
    layout="wide"
)

# Initialize session state for profile and pages
if 'profile' not in st.session_state:
    st.session_state.profile = {}
if 'show_profile' not in st.session_state:
    st.session_state.show_profile = False
if 'show_chat' not in st.session_state:
    st.session_state.show_chat = False
if 'weather_data' not in st.session_state:
    st.session_state.weather_data = None

# Function to get coordinates from city name (using Nominatim)
def get_coordinates(city_name):
    url = f"https://nominatim.openstreetmap.org/search?q={city_name}&format=json&limit=1"
    headers = {"User -Agent": "KrishiSakhiApp/1.0 (krishisakhi@example.com)"}
    try:
        response = requests.get(url, headers=headers)
        if response.status_code == 200:
            location_data = response.json()
            if location_data:
                location = location_data[0]
                return float(location['lat']), float(location['lon'])
        st.warning("‡¥∏‡µç‡¥•‡¥≤‡¥Ç ‡¥ï‡¥£‡µç‡¥ü‡µÜ‡¥§‡µç‡¥§‡¥æ‡¥®‡¥æ‡¥Ø‡¥ø‡¥≤‡µç‡¥≤. (City not found. Try exact name.)")
        return None, None
    except Exception as e:
        st.error(f"API ‡¥§‡µÜ‡¥±‡µç‡¥±‡µç: {str(e)} (API Error)")
        return None, None

# Function to get weather data (Open-Meteo, 24 hours)
def get_weather_data(lat, lon):
    url = f"https://api.open-meteo.com/v1/forecast?latitude={lat}&longitude={lon}&hourly=temperature_2m,precipitation_probability,relative_humidity_2m,wind_speed_10m&forecast_days=2&timezone=Asia/Kolkata"
    try:
        response = requests.get(url)
        if response.status_code == 200:
            return response.json()
        else:
            st.error("‡¥ï‡¥æ‡¥≤‡¥æ‡¥µ‡¥∏‡µç‡¥• ‡¥°‡¥æ‡¥±‡µç‡¥± ‡¥≤‡¥≠‡µç‡¥Ø‡¥Æ‡¥≤‡µç‡¥≤. (Weather data unavailable.)")
            return None
    except Exception as e:
        st.error(f"API ‡¥§‡µÜ‡¥±‡µç‡¥±‡µç: {str(e)} (API Error)")
        return None

# Title and welcome
st.title("üå± ‡¥∏‡µç‡¥µ‡¥æ‡¥ó‡¥§‡¥Ç! Krishi Sakhi - ‡¥ï‡µÉ‡¥∑‡¥ø ‡¥∏‡¥ñ‡¥ø")
st.markdown("---")

# Welcome section (initial view)
if not st.session_state.show_profile and not st.session_state.show_chat:
    st.header("‡¥®‡¥ø‡¥ô‡µç‡¥ô‡¥≥‡µÅ‡¥ü‡µÜ ‡¥™‡µç‡¥∞‡µä‡¥´‡µà‡µΩ ‡¥∏‡¥ú‡µç‡¥ú‡µÄ‡¥ï‡¥∞‡¥ø‡¥ï‡µç‡¥ï‡µÅ‡¥ï")
    st.write("‡¥ï‡µÉ‡¥∑‡¥ø ‡¥∏‡¥π‡¥æ‡¥Ø‡¥§‡µç‡¥§‡¥ø‡¥®‡¥æ‡¥Ø‡¥ø ‡¥®‡¥ø‡¥ô‡µç‡¥ô‡¥≥‡µÅ‡¥ü‡µÜ ‡¥µ‡¥ø‡¥µ‡¥∞‡¥ô‡µç‡¥ô‡µæ ‡¥™‡µÇ‡¥∞‡¥ø‡¥™‡µç‡¥™‡¥ø‡¥ï‡µç‡¥ï‡µÅ‡¥ï. (Fill your farmer profile for personalized advice.)")
    
    # Set Profile Button (no switch_page - toggles view)
    if st.button("‡¥™‡µç‡¥∞‡µä‡¥´‡µà‡µΩ ‡¥∏‡¥ú‡µç‡¥ú‡µÄ‡¥ï‡¥∞‡¥ø‡¥ï‡µç‡¥ï‡µÅ‡¥ï (Set Profile)", use_container_width=True):
        st.session_state.show_profile = True
        st.rerun()  # Refresh to show profile form
    
    st.markdown("---")
    st.write("*‡¥â‡¥¶‡¥æ‡¥π‡¥∞‡¥£‡¥Ç: ‡¥§‡µÉ‡¥∂‡µç‡¥∂‡µÇ‡µº, ‡¥¨‡µç‡¥∞‡¥ø‡µª‡¥ú‡¥æ‡µΩ, ‡¥ö‡µÜ‡¥±‡µÅ ‡¥®‡¥æ‡¥ü‡µç‡¥ü‡¥ø‡µª‡¥™‡µÅ‡¥±‡¥Ç* (Example: Thrissur, Brinjal, Sandy loam)")

# Profile Setup Section (Enhanced with Personal Data and More Options)
elif st.session_state.show_profile:
    st.header("üë®‚Äçüåæ ‡¥®‡¥ø‡¥ô‡µç‡¥ô‡¥≥‡µÅ‡¥ü‡µÜ ‡¥™‡µç‡¥∞‡µä‡¥´‡µà‡µΩ (Your Profile)")
    
    # Personal Data Section (Name and Age)
    st.subheader("‡¥µ‡µç‡¥Ø‡¥ï‡µç‡¥§‡¥ø‡¥ó‡¥§ ‡¥µ‡¥ø‡¥µ‡¥∞‡¥ô‡µç‡¥ô‡µæ (Personal Details)")
    col_p1, col_p2 = st.columns(2)
    with col_p1:
        name = st.text_input("‡¥®‡¥ø‡¥ô‡µç‡¥ô‡¥≥‡µÅ‡¥ü‡µÜ ‡¥™‡µá‡¥∞‡µç (Farmer's Name)", placeholder="‡¥â‡¥¶‡¥æ: ‡¥∞‡¥æ‡¥Æ‡µª (e.g., Raman)")
    with col_p2:
        age = st.slider("‡¥™‡µç‡¥∞‡¥æ‡¥Ø‡¥Ç (Age)", min_value=18, max_value=80, value=40, step=1)
    
    # Location and Crop (Expanded Options)
    st.subheader("‡¥ï‡µÉ‡¥∑‡¥ø ‡¥µ‡¥ø‡¥µ‡¥∞‡¥ô‡µç‡¥ô‡µæ (Farming Details)")
    col1, col2 = st.columns(2)
    
    with col1:
        # More Locations (Kerala Districts/Cities)
        location = st.selectbox(
            "‡¥∏‡µç‡¥•‡¥≤‡¥Ç (Location)", 
            [
                "‡¥§‡µÉ‡¥∂‡µç‡¥∂‡µÇ‡µº (Thrissur)", "‡¥ï‡µä‡¥ö‡µç‡¥ö‡¥ø (Kochi)", "‡¥ï‡µã‡¥¥‡¥ø‡¥ï‡µç‡¥ï‡µã‡¥ü‡µç (Kozhikode)", 
                "‡¥Ü‡¥≤‡¥™‡µç‡¥™‡µÅ‡¥¥ (Alappuzha)", "‡¥é‡¥±‡¥£‡¥æ‡¥ï‡µÅ‡¥≥‡¥Ç (Ernakulam)", "‡¥á‡¥ü‡µÅ‡¥ï‡µç‡¥ï‡¥ø (Idukki)", 
                "‡¥ï‡¥£‡µç‡¥£‡µÇ‡µº (Kannur)", "‡¥ï‡¥æ‡¥∏‡µº‡¥ó‡µã‡¥°‡µç (Kasaragod)", "‡¥ï‡µä‡¥≤‡µç‡¥≤‡¥Ç (Kollam)", 
                "‡¥ï‡µã‡¥ü‡µç‡¥ü‡¥Ø‡¥Ç (Kottayam)", "‡¥Æ‡¥≤‡¥™‡µç‡¥™‡µÅ‡¥±‡¥Ç (Malappuram)", "‡¥™‡¥æ‡¥≤‡¥ï‡µç‡¥ï‡¥æ‡¥ü‡µç (Palakkad)", 
                "‡¥™‡¥§‡µç‡¥§‡¥®‡¥Ç‡¥§‡¥ø‡¥ü‡µç‡¥ü (Pathanamthitta)", "‡¥§‡¥ø‡¥∞‡µÅ‡¥µ‡¥®‡¥®‡µç‡¥§‡¥™‡µÅ‡¥∞‡¥Ç (Thiruvananthapuram)", 
                "‡¥µ‡¥Ø‡¥®‡¥æ‡¥ü‡µç (Wayanad)", "‡¥Æ‡¥±‡µç‡¥±‡µç (Other)"
            ]
        )
        # More Crops (Common Kerala Crops)
        crop = st.selectbox(
            "‡¥™‡µç‡¥∞‡¥ß‡¥æ‡¥® ‡¥µ‡¥ø‡¥≥ (Main Crop)", 
            [
                "‡¥¨‡µç‡¥∞‡¥ø‡µª‡¥ú‡¥æ‡µΩ (Brinjal)", "‡¥™‡¥ö‡µç‡¥ö‡¥ï‡µç‡¥ï‡¥±‡¥ø (Vegetables)", "‡¥Æ‡¥∞‡¥Ç (Trees)", 
                "‡¥®‡µÜ‡¥≤‡µç‡¥≤‡µç (Paddy/Rice)", "‡¥§‡µÜ‡¥ô‡µç‡¥ô‡µç (Coconut)", "‡¥µ‡¥æ‡¥¥‡¥™‡µç‡¥™‡¥¥‡¥Ç (Banana)", 
                "‡¥±‡¥¨‡µç‡¥¨‡µº (Rubber)", "‡¥ï‡µÅ‡¥∞‡µÅ‡¥Æ‡µÅ‡¥≥‡¥ï‡µç (Pepper)", "‡¥Ü‡¥Æ (Mango)", 
                "‡¥™‡µà‡¥®‡¥æ‡¥™‡µç‡¥™‡¥ø‡µæ (Pineapple)", "‡¥û‡¥æ‡µª‡¥° (Ginger)", "‡¥è‡¥≤‡¥Ç (Cardamom)", 
                "‡¥ö‡µá‡¥Æ‡µç‡¥™‡µç (Tapioca)", "‡¥ï‡¥™‡µç‡¥™ (Cotton)", "‡¥Æ‡¥±‡µç‡¥±‡µç (Other)"
            ]
        )
    
    with col2:
        # More Soil Types (Lands/Fields)
        soil = st.selectbox(
            "‡¥Æ‡¥£‡µç‡¥£‡¥ø‡¥®‡µç‡¥±‡µÜ ‡¥§‡¥∞‡¥Ç (Soil Type)", 
            [
                "‡¥ö‡µÜ‡¥±‡µÅ ‡¥®‡¥æ‡¥ü‡µç‡¥ü‡¥ø‡µª‡¥™‡µÅ‡¥±‡¥Ç (Sandy Loam)", "‡¥ï‡¥≥‡µç‡¥≥‡¥Æ‡¥£‡µç‡¥£‡µç (Clay)", 
                "‡¥≤‡µã‡¥Æ‡¥ø (Loamy)", "‡¥≤‡¥æ‡¥±‡µç‡¥±‡¥±‡µà‡¥±‡µç‡¥±‡µç (Laterite)", "‡¥ö‡µÅ‡¥µ‡¥™‡µç‡¥™‡µç ‡¥Æ‡¥£‡µç‡¥£‡µç (Red Soil)", 
                "‡¥Ö‡¥≤‡µÇ‡¥µ‡¥ø‡¥Ø‡µΩ (Alluvial)", "‡¥ï‡¥±‡µÅ‡¥§‡µç‡¥§ ‡¥Æ‡¥£‡µç‡¥£‡µç (Black Soil)", "‡¥™‡µÄ‡¥±‡µç‡¥±‡¥ø (Peaty)", 
                "‡¥Æ‡¥±‡µç‡¥±‡µç (Other)"
            ]
        )
        # New: Field Type Options
        field_type = st.selectbox(
            "‡¥´‡µÄ‡µΩ‡¥°‡¥ø‡¥®‡µç‡¥±‡µÜ ‡¥§‡¥∞‡¥Ç (Field Type)", 
            [
                "‡¥ú‡¥≤‡¥∏‡µá‡¥ö‡¥®‡¥Ç (Irrigated)", "‡¥Æ‡¥¥‡¥æ‡¥¨‡¥æ‡¥ß‡¥ø‡¥§‡¥Ç (Rainfed)", 
                "‡¥ü‡µÜ‡¥±‡¥∏‡µç (Terrace)", "‡¥â‡¥Ø‡µº‡¥®‡µç‡¥® ‡¥®‡¥ø‡¥≤‡¥Ç (Upland)", 
                "‡¥§‡¥æ‡¥¥‡µç‡¥®‡µç‡¥® ‡¥®‡¥ø‡¥≤‡¥Ç (Lowland)", "‡¥Æ‡¥±‡µç‡¥±‡µç (Other)"
            ]
        )
        experience = st.slider("‡¥ï‡µÉ‡¥∑‡¥ø ‡¥Ö‡¥®‡µÅ‡¥≠‡¥µ‡¥Ç (Years of Experience)", 0, 30, 5)
    
    # Submit Button (with Validation)
    if st.button("‡¥™‡µç‡¥∞‡µä‡¥´‡µà‡µΩ ‡¥∏‡µá‡¥µ‡µç ‡¥ö‡µÜ‡¥Ø‡µç‡¥Ø‡µÅ‡¥ï (Save Profile)", use_container_width=True):
        if not name.strip():  # Validate name
            st.error("‡¥™‡µá‡¥∞‡µç ‡¥®‡µΩ‡¥ï‡µÅ‡¥ï! (Please enter your name.)")
        else:
            st.session_state.profile = {
                'name': name.strip(),
                'age': age,
                'location': location.split(' (')[0] if ' (' in location else location,  # Extract city name
                'crop': crop.split(' (')[0] if ' (' in crop else crop,
                'soil': soil.split(' (')[0] if ' (' in soil else soil,
                'field_type': field_type.split(' (')[0] if ' (' in field_type else field_type,
                'experience': experience
            }
            st.session_state.show_profile = False
            st.session_state.show_chat = True
            st.success(f"‡¥™‡µç‡¥∞‡µä‡¥´‡µà‡µΩ ‡¥∏‡µá‡¥µ‡µç ‡¥ö‡µÜ‡¥Ø‡µç‡¥§‡µÅ, {name}! (Profile saved, {name}!)")
            st.rerun()  # Go to chat
    
    # Back button
    if st.button("‡¥Ö‡¥ü‡¥ô‡µç‡¥ô‡µæ (Back to Welcome)"):
        st.session_state.show_profile = False
        st.rerun()

# Chat Section with Weather (Updated Profile Display)
elif st.session_state.show_chat:
    name = st.session_state.profile.get('name', '‡¥ï‡µº‡¥∑‡¥ï‡µª')  # Fallback
    location = st.session_state.profile.get('location', 'Thrissur')  # Fallback
    st.header(f"üí¨ ‡¥π‡¥≤‡µã {name}! {st.session_state.profile.get('crop', '‡¥µ‡¥ø‡¥≥')} ‡¥µ‡¥ø‡¥≥‡¥Ø‡µç‡¥ï‡µç‡¥ï‡µÅ‡¥≥‡µç‡¥≥ ‡¥â‡¥™‡¥¶‡µá‡¥∂‡¥Ç (Hello {name}! Chat - Advice for {st.session_state.profile.get('crop', 'Crop')})")
    
    # Display saved profile (Enhanced with Name, Age, Field Type)
    st.subheader("‡¥®‡¥ø‡¥ô‡µç‡¥ô‡¥≥‡µÅ‡¥ü‡µÜ ‡¥™‡µç‡¥∞‡µä‡¥´‡µà‡µΩ (Your Profile):")
    profile_str = f"‡¥™‡µá‡¥∞‡µç: {st.session_state.profile.get('name', 'N/A')}, ‡¥™‡µç‡¥∞‡¥æ‡¥Ø‡¥Ç: {st.session_state.profile.get('age', 'N/A')} ‡¥µ‡¥Ø‡¥∏‡µç‡¥∏‡µç, ‡¥∏‡µç‡¥•‡¥≤‡¥Ç: {st.session_state.profile.get('location', 'N/A')}, ‡¥µ‡¥ø‡¥≥: {st.session_state.profile.get('crop', 'N/A')}, ‡¥Æ‡¥£‡µç‡¥£‡µç: {st.session_state.profile.get('soil', 'N/A')}, ‡¥´‡µÄ‡µΩ‡¥°‡µç ‡¥§‡¥∞‡¥Ç: {st.session_state.profile.get('field_type', 'N/A')}, ‡¥Ö‡¥®‡µÅ‡¥≠‡¥µ‡¥Ç: {st.session_state.profile.get('experience', 0)} ‡¥µ‡µº‡¥∑‡¥Ç"
    st.write(profile_str)
    
    # Weather Section
    st.subheader(f"üå§Ô∏è {location}‡¥Ø‡¥ø‡¥≤‡µÜ ‡¥ï‡¥æ‡¥≤‡¥æ‡¥µ‡¥∏‡µç‡¥• (Weather in {location})")
    
    if st.button("‡¥ï‡¥æ‡¥≤‡¥æ‡¥µ‡¥∏‡µç‡¥• ‡¥Ö‡¥™‡µç‡¥°‡µá‡¥±‡µç‡¥±‡µç ‡¥≤‡¥≠‡¥ø‡¥ï‡µç‡¥ï‡µÅ‡¥ï (Get Weather Update)", use_container_width=True):
        lat, lon = get_coordinates(location)
        if lat and lon:
            st.session_state.weather_data = get_weather_data(lat, lon)
            st.rerun()
    
    if st.session_state.weather_data:
        data = st.session_state.weather_data
        forecast_hours = 24
        times = [datetime.now() + timedelta(hours=i) for i in range(forecast_hours)]
        
        # Prepare DataFrame for charts
        df = pd.DataFrame({"Time": times})
        df["Temperature (¬∞C)"] = data['hourly']['temperature_2m'][:forecast_hours]
        df["Rain Probability (%)"] = data['hourly']['precipitation_probability'][:forecast_hours]
        df["Humidity (%)"] = data['hourly']['relative_humidity_2m'][:forecast_hours]
        df["Wind Speed (km/h)"] = [speed * 3.6 for speed in data['hourly']['wind_speed_10m'][:forecast_hours]]  # Convert m/s to km/h
        
        # Current Weather Summary (first hour)
        col1, col2, col3, col4 = st.columns(4)
        with col1:
            st.metric("üå°Ô∏è ‡¥§‡¥æ‡¥™‡¥®‡¥ø‡¥≤ (Temperature)", f"{df['Temperature (¬∞C)'][0]:.1f}¬∞C")
        with col2:
            st.metric("üåßÔ∏è ‡¥Æ‡¥¥ ‡¥∏‡¥æ‡¥ß‡µç‡¥Ø‡¥§ (Rain Prob)", f"{df['Rain Probability (%)'][0]}%")
        with col3:
            st.metric("üíß ‡¥à‡µº‡¥™‡µç‡¥™‡¥Ç (Humidity)", f"{df['Humidity (%)'][0]}%")
        with col4:
            st.metric("üå¨Ô∏è ‡¥ï‡¥æ‡¥±‡µç‡¥±‡µç (Wind)", f"{df['Wind Speed (km/h)'][0]:.1f} km/h")
        
        # Forecast Charts
        st.subheader("‡¥Ö‡¥ü‡µÅ‡¥§‡µç‡¥§ 24 ‡¥Æ‡¥£‡¥ø‡¥ï‡µç‡¥ï‡µÇ‡¥±‡¥ø‡¥®‡µç‡¥±‡µÜ ‡¥™‡µç‡¥∞‡¥µ‡¥ö‡¥®‡¥Ç (24-Hour Forecast)")
        col_temp, col_rain = st.columns(2)
        with col_temp:
            st.line_chart(df.set_index("Time")["Temperature (¬∞C)"], use_container_width=True)
        with col_rain:
            st.line_chart(df.set_index("Time")["Rain Probability (%)"], use_container_width=True)
        
        # Crop Advice based on Weather (Simple integration)
        if df['Rain Probability (%)'][0] > 50:
            st.warning(f"‡¥Æ‡¥¥ ‡¥∏‡¥æ‡¥ß‡µç‡¥Ø‡¥§ ‡¥â‡¥Ø‡µº‡¥®‡µç‡¥®‡µÅ ({df['Rain Probability (%)'][0]}%). {st.session_state.profile.get('crop', '‡¥µ‡¥ø‡¥≥')}‡¥Ø‡µç‡¥ï‡µç‡¥ï‡µç ‡¥ú‡¥≤‡¥∏‡µá‡¥ö‡¥®‡¥Ç ‡¥ï‡µÅ‡¥±‡¥Ø‡µç‡¥ï‡µç‡¥ï‡µÅ‡¥ï. (High rain chance. Reduce irrigation for your crop.)")
        elif df['Temperature (¬∞C)'][0] > 35:
            st.info(f"‡¥â‡¥Ø‡µº‡¥®‡µç‡¥® ‡¥§‡¥æ‡¥™‡¥®‡¥ø‡¥≤ ({df['Temperature (¬∞C)'][0]}¬∞C). {st.session_state.profile.get('crop', '‡¥µ‡¥ø‡¥≥')}‡¥Ø‡µç‡¥ï‡µç‡¥ï‡µç ‡¥®‡¥ø‡¥¥‡µΩ ‡¥®‡µΩ‡¥ï‡µÅ‡¥ï. (High temp. Provide shade for your crop.)")
    
    else:
        st.info("‡¥ï‡¥æ‡¥≤‡¥æ‡¥µ‡¥∏‡µç‡¥• ‡¥°‡¥æ‡¥±‡µç‡¥± ‡¥≤‡¥≠‡µç‡¥Ø‡¥Æ‡¥≤‡µç‡¥≤. ‡¥¨‡¥ü‡µç‡¥ü‡µ∫ ‡¥ï‡µç‡¥≤‡¥ø‡¥ï‡µç‡¥ï‡µç ‡¥ö‡µÜ‡¥Ø‡µç‡¥Ø‡µÅ‡¥ï. (No data yet. Click button to fetch.)")
    
    st.markdown("---")
    
    # Chat interface (rule-based example - add your OpenAI if needed)
    if 'messages' not in st.session_state:
        st.session_state.messages = []
    
    # Display chat history
    for message in st.session_state.messages:
        with st.chat_message(message["role"]):
            st.markdown(message["content"])
    
    # Chat input
    if prompt := st.chat_input("‡¥®‡¥ø‡¥ô‡µç‡¥ô‡¥≥‡µÅ‡¥ü‡µÜ ‡¥ö‡µã‡¥¶‡µç‡¥Ø‡¥Ç ‡¥á‡¥µ‡¥ø‡¥ü‡µÜ ‡¥ü‡µà‡¥™‡µç‡¥™‡µç ‡¥ö‡µÜ‡¥Ø‡µç‡¥Ø‡µÅ‡¥ï (Type your query, e.g., '‡¥Æ‡¥¥' or '‡¥ï‡µÄ‡¥ü‡¥Ç')"):
        # Add user message
        st.session_state.messages.append({"role": "user", "content": prompt})
        with st.chat_message("user"):
            st.markdown(prompt)
        
        # Generate response (rule-based fallback, now personalized with name/age/field_type)
        def generate_bot_response(user_input, profile, weather_data=None):
            name = profile.get('name', '‡¥ï‡µº‡¥∑‡¥ï‡µª')
            age = profile.get('age', 40)
            user_input_lower = user_input.lower()
            crop = profile.get('crop', '')
            location = profile.get('location', '')
            field_type = profile.get('field_type', '')
            soil = profile.get('soil', '')
            
            if weather_data and 'temperature_2m' in weather_data['hourly']:
                current_temp = weather_data['hourly']['temperature_2m'][0]
                rain_prob = weather_data['hourly']['precipitation_probability'][0]
            else:
                current_temp = 28  # Fallback
                rain_prob = 0
            
            greeting = f"‡¥π‡¥≤‡µã {name}, ‡¥®‡¥ø‡¥ô‡µç‡¥ô‡¥≥‡µÅ‡¥ü‡µÜ {age} ‡¥µ‡¥Ø‡¥∏‡µç‡¥∏‡¥ø‡¥≤‡µÜ ‡¥Ö‡¥®‡µÅ‡¥≠‡¥µ‡¥§‡µç‡¥§‡µã‡¥ü‡µÜ {field_type} ‡¥´‡µÄ‡µΩ‡¥°‡¥ø‡¥®‡µç... (Hello {name}, with your"
